image: docker:20
variables:
  # using "docker" as the host is only possible if you alias the service below
  DOCKER_HOST: tcp://docker:2375 
  # could be wrong here but although Docker defaults to overlay2, 
  # Docker-in-Docker (DIND) does not according to the following GitLab doc: 
  # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-the-overlayfs-driver
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  REG_SHA256: ade837fc5224acd8c34732bf54a94f579b47851cc6a7fd5899a98386b782e228
  REG_VERSION: 0.16.1
services:
  - name: docker:20-dind
    alias: docker
    # in our experience although you'd assume this would be sufficient, this did 
    # nothing to prevent connection errors without `DOCKER_TLS_CERTDIR` being set 
    # to an empty string, and I would call that beyond mildly infuriating.
    command: ["--tls=false", "--mtu=1450"]
before_script:
  # system dependencies to build external package that are required by wheel
  - apk add --no-cache make gcc gfortran build-base wget freetype-dev libpng-dev openblas-dev
  # system tools
  - apk add --no-cache bash git openssh-client
  # install Node.js/npm and semantic release packages
  - apk add --no-cache nodejs npm
  - npm i semantic-release@20.1.0 semantic-release-python@2.5.30 @semantic-release/changelog@6.0.2 @google/semantic-release-replace-plugin@1.2.0 @semantic-release/github@8.0.7 @semantic-release/git@10.0.1 -D
  # install python environment with wheel and twine
  - apk add --no-cache python3 python3-dev py3-pip
  - pip install wheel twine
  # install script to delete container from gitlab container registry
  # from https://docs.gitlab.com/ee/user/packages/container_registry/delete_container_registry_images.html#use-gitlab-cicd
  - apk add --no-cache curl
  - curl --fail --show-error --location "https://github.com/genuinetools/reg/releases/download/v$REG_VERSION/reg-linux-amd64" --output ./reg
  - echo "$REG_SHA256  ./reg" | sha256sum -c -
  - chmod a+x ./reg
  # login the gitlab container registry
  - echo $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin

stages:
  # - test-python-install
  # - build
  # - test
  # - clean
  - release

# test:
#   stage: test
#   needs: ["build"]
#   script:
#     - make test TAG=$(python get_version.py)-dev.${CI_COMMIT_REF_NAME}
#   coverage: '/TOTAL.*\s+(\d+%)$/'
#   artifacts:
#     reports:
#       coverage_report:
#         coverage_format: cobertura
#         path: test/report/cov.xml

# test-python-install:
#   stage: test-python-install
#   script:
#     - make test-python-install
#   interruptible: true

# build:
#   stage: build
#   needs: ["test-python-install"]
#   script:
#     - make build-docker TAG=$(python get_version.py)-dev.${CI_COMMIT_REF_NAME}
#     - make push-docker-ci TAG=$(python get_version.py)-dev.${CI_COMMIT_REF_NAME}

# clean:
#   stage: clean
#   needs: ["test"]
#   script:
#     - make rm-docker-ci TAG=$(python get_version.py)-dev.${CI_COMMIT_REF_NAME}

release:
  stage: release
  needs: ["test"]
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
    - if: '$CI_COMMIT_REF_NAME == "dev"'
  variables:
    GL
  script:
    - export GL_TOKEN=${CI_JOB_TOKEN}
    - export GH_URL=https://github.com/HIP-infrastructure/bids-converter
    - npx semantic-release 
    - make build-docker TAG=$(python get_version.py)
    - make push-docker-ci TAG=$(python get_version.py)
